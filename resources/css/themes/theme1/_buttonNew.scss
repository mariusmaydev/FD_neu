@use "vars";
@use "container";
@use "helper";
@use "sass:color";
@use "../../../../../Splint/scss/tools/tools" as S_tools;

$color-main         : vars.$color-T_container-Medium;
$color-main-hover   : vars.$color-primary;
$color-hover-effect : vars.$color-primary-Dark;
$color-shadow-dark  : vars.$color-header-Dark;
$color-shadow-light : vars.$color-header-Dark;

$skew               : vars.$general-skew;


@mixin TButton_primary($size-offset: 1) {
    $color-background : vars.$NEW-color-primary;
    $color-active : vars.$NEW-color-primary-active;
    $color-hover : vars.$NEW-color-primary-active;
    $color-text: white;


    box-shadow: none;
    border-radius: vars.$NEW-border-radius-main;
    background-color: $color-background;
    border: none;
    padding: calc(0.5rem * $size-offset);
    transition: background-color 0.2s;
    > span {
        font-size: calc(1rem * $size-offset);
        color: $color-text;
    }
    &:hover {
        background-color: $color-hover;
    }
    &[state*='active']{
        background-color: $color-active;
    }
}

@mixin TButton_secondary($size-offset: 1) {
    $color-background : transparent;
    $color-active : vars.$NEW-color-primary-active;
    $color-hover : vars.$NEW-color-primary-active;
    $color-text: vars.$NEW-color-text-secondary;

    border-radius: vars.$NEW-border-radius-main;
    background-color: $color-background;
    border: calc(2px * $size-offset) solid $color-text;
    padding: calc(0.5rem * $size-offset);
    transition: border-color 0.2s;
    > span {
        font-size: calc(1rem * $size-offset);
        color: $color-text;
    }
    &:hover {
        border-color: $color-hover;
    }
    &[state*='active']{
        border-color: $color-active;
    }
}

@mixin TButton_simple($color: $color-main) {
    
    box-shadow: none ;

    border-radius: 0px;
    background-color: $color;
    color: white;
    padding: 0.5rem;
    border: none;
    cursor: pointer;
    box-sizing: content-box;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        // background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        // background-color: vars.$color-button-passive;
    }
    &:hover {
        // background-color: gray;
    }
    &:active:hover {
        // background-color: orange;
    }
}


@mixin TButton_basic(){
    position: relative;
    float: right;
    cursor: pointer;
    padding: 0.5rem;
    background-color: $color-main;
    border: none;
    box-sizing: border-box;
    > span {
        box-sizing: border-box;
        position: relative;
        margin: 2em;
        font-size: 1.5em;
    }
    &:hover {
        background-color: $color-main-hover;
    }
    @include TButton_Animated(true, false);
}

@mixin TButton_Animated($small: false, $hoverAnimation : true){
    height: max-content;
    width: max-content;
    padding: 0.5em;
    background-color: $color-main;

    box-shadow: none;
    transition: box-shadow 50ms ease, transform 50ms ease;
    @if $small {
        box-shadow: 2px 2px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                    inset -1px 0px 0px 0px $color-hover-effect,
                    inset 0px -1px 0px 0px $color-hover-effect;
        &:active,&[state*='active'] {
            box-shadow: 1px 1px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color-hover-effect,
                        inset 0px -1px 0px 0px $color-hover-effect;
            transform: translateX(1px) translateY(1px);
        }
    } @else {
        box-shadow: 3px 3px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                    inset -1px 0px 0px 0px $color-hover-effect,
                    inset 0px -1px 0px 0px $color-hover-effect;
        &:active,&[state*='active'] {
            box-shadow: 2px 2px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color-hover-effect,
                        inset 0px -1px 0px 0px $color-hover-effect;
            transform: translateX(1px) translateY(1px);
        }
    }
    @if $hoverAnimation {
        &:hover {
            > span {
                &:not(.description) {
                    text-shadow: 2px 2px 0px color.adjust($color-main-hover );
                    transition-duration: 10ms;
                    // color: vars.$color-primary;
                }
            }
        }
        > span {
            text-shadow: 0px 0px 0px transparent;
            transition: text-shadow cubic-bezier(0, 0.52, 1, 1) 2s;
            // transition: color 50ms ease;
        }
    }
}