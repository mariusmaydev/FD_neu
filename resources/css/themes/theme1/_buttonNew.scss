@use "vars";
@use "container";
@use "helper";
@use "sass:color";
@use "../../../../../Splint/scss/tools/tools" as S_tools;

$color-main         : vars.$color-T_container-Medium;
$color-main-hover   : vars.$color-primary;
$color-hover-effect : vars.$color-primary-Dark;
$color-shadow-dark  : vars.$color-header-Dark;
$color-shadow-light : vars.$color-header-Dark;

$skew               : vars.$general-skew;

@mixin TButtonAnimation_simple($color: $color-main) {
    transition: background-color .1s ease-in ;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        // background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        // background-color: vars.$color-button-passive;
    }
    &:hover {
        background-color: color.adjust($color, $lightness: -10%);
    }
    &:active:hover {
        // background-color: orange;
    }
}

@mixin TButton_simple($color: $color-main) {
    
    box-shadow: none ;

    border-radius: 0px;
    background-color: $color;
    color: white;
    padding: 0.5rem;
    border: none;
    cursor: pointer;
    box-sizing: content-box;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        // background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        // background-color: vars.$color-button-passive;
    }
    &:hover {
        // background-color: gray;
    }
    &:active:hover {
        // background-color: orange;
    }
}

@mixin TButton_important_B(){
    position: relative;
    width: 100%;
    box-sizing: border-box;
    background-color: vars.$color-header;
    box-shadow: 3px 3px 0px 0px vars.$color-header-Dark;
    transition: box-shadow 100ms ease, transform 100ms ease;
    &:hover {
        box-shadow: 5px 5px 0px 0px color.adjust(vars.$color-header-Dark, $alpha: -0.1);//, 3px 3px 2px 0px color.adjust(vars.$color-primary-light);
        transform: translateX(-2px) translateY(-2px);
        color: vars.$color-primary-text;
    }
    > button {
        @include helper.preventSelect();
        > span:first-of-type{
            margin-right: 0.2em;
        }
        width: 100%;
        padding: 0.5em;
        box-sizing: border-box;
        display: flex;
        flex-direction: row;
        justify-content: center;
        margin: 0;
        border-radius: 0;
        background-color: vars.$color-primary-Dark;
        box-shadow: none;
        @include S_tools.SPLINT-border-inset(vars.$color-primary-complementary-Dark, 2px, false, false, true, true);
        transition: box-shadow cubic-bezier(0, 0.52, 1, 1) 1s;
        &:hover {
            @include S_tools.SPLINT-border-inset(vars.$color-primary-complementary-Dark, 4px, false, false, true, true);
            > span {
                color: vars.$color-primary-text;
            }
        }
        > span {
            font-size: 1.5em;
        }
    }
}

@mixin TButton_important_A(){
    flex: 1;
    transform: translateX(0px) skewX(-($skew));
    &:not([loaded*='true']){
        visibility: hidden;
        transform: translateX(40rem);
    }
    transition: transform 0.4s ease-out;
    visibility: visible;
    box-shadow: none;
    background-color: vars.$color-header;
    box-shadow: 3px 3px 0px 0px vars.$color-header-Dark;
    transition: box-shadow 100ms ease, transform 100ms ease;
    &:hover {
        box-shadow: 5px 5px 0px 0px color.adjust(vars.$color-header-Dark, $alpha: -0.1);
        transform: skewX(-($skew)) translateX(-2px) translateY(-2px);
        color: vars.$color-primary-text;
    }
    > button {
        @include helper.preventSelect();
        width: 100%;
        padding: 0.75rem;
        display: flex;
        flex-direction: row;
        justify-content: center;
        
        background-color: vars.$color-primary-Dark;
        box-shadow: none;
        @include S_tools.SPLINT-border-inset(vars.$color-primary-complementary-Dark, 2px, false, false, true, true);
        transition: box-shadow cubic-bezier(0, 0.52, 1, 1) 1s;
        &:hover {
            @include S_tools.SPLINT-border-inset(vars.$color-primary-complementary-Dark, 4px, false, false, true, true);
            > span {
                color: vars.$color-primary-text;
            }
        }
        > span {
            -ms-transform: skewX($skew); /* IE 9 */
            -webkit-transform: skewX($skew); /* Safari */
            transform: skewX($skew);
            font-size: 2rem;
        }
    }
}

@mixin TButton_basic(){
    position: relative;
    float: right;
    cursor: pointer;
    padding: 0.5rem;
    background-color: $color-main;
    border: none;
    box-sizing: border-box;
    > span {
        box-sizing: border-box;
        position: relative;
        margin: 2em;
        font-size: 1.5em;
    }
    &:hover {
        background-color: $color-main-hover;
    }
    @include TButton_Animated(true, false);
}

@mixin TButton_Animated($small: false, $hoverAnimation : true){
    height: max-content;
    width: max-content;
    padding: 0.5em;
    background-color: $color-main;

    box-shadow: none;
    transition: box-shadow 50ms ease, transform 50ms ease;
    @if $small {
        box-shadow: 2px 2px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                    inset -1px 0px 0px 0px $color-hover-effect,
                    inset 0px -1px 0px 0px $color-hover-effect;
        &:active,&[state*='active'] {
            box-shadow: 1px 1px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color-hover-effect,
                        inset 0px -1px 0px 0px $color-hover-effect;
            transform: translateX(1px) translateY(1px);
        }
    } @else {
        box-shadow: 3px 3px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                    inset -1px 0px 0px 0px $color-hover-effect,
                    inset 0px -1px 0px 0px $color-hover-effect;
        &:active,&[state*='active'] {
            box-shadow: 2px 2px 0px 0px color.adjust($color-shadow-dark, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color-hover-effect,
                        inset 0px -1px 0px 0px $color-hover-effect;
            transform: translateX(1px) translateY(1px);
        }
    }
    @if $hoverAnimation {
        &:hover {
            > span {
                &:not(.description) {
                    text-shadow: 2px 2px 0px color.adjust($color-main-hover );
                    transition-duration: 10ms;
                    // color: vars.$color-primary;
                }
            }
        }
        > span {
            text-shadow: 0px 0px 0px transparent;
            transition: text-shadow cubic-bezier(0, 0.52, 1, 1) 2s;
            // transition: color 50ms ease;
        }
    }
}