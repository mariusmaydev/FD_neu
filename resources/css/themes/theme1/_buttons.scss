@use "vars";
@use 'sass:color';
// @use "../../general/main" as Gmain;
@mixin T_button_4(){
    box-shadow: none ;

    border-radius: 0px;
    background-color: darkgray;
    color: white;
    padding: 0.5em;
    border: none;
    cursor: pointer;
    box-sizing: content-box;
    margin: 0.5em;
    overflow: hidden;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        background-color: vars.$color-button-passive;
    }
    &:hover {
        background-color: gray;
    }
    &:active:hover {
        background-color: orange;
    }
}

@mixin T_button_Animated($small: false, $hoverAnimation : true){
        $color1: vars.$color-header-Dark;
        $color2: vars.$color-primary-Dark;
        $color3: vars.$color-T_container-Medium;
        $color4: vars.$color-primary;


        height: max-content;
        width: max-content;
        padding: 0.5em;
        background-color: $color3;

        box-shadow: none;
        transition: box-shadow 50ms ease, transform 50ms ease;
        @if $small {
            box-shadow: 2px 2px 0px 0px color.adjust($color1, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color2,
                        inset 0px -1px 0px 0px $color2;
            &:active {
                box-shadow: 1px 1px 0px 0px color.adjust($color1, $alpha: -0.1),
                            inset -1px 0px 0px 0px $color2,
                            inset 0px -1px 0px 0px $color2;
                transform: translateX(1px) translateY(1px);
            }
        } @else {
            box-shadow: 3px 3px 0px 0px color.adjust($color1, $alpha: -0.1),
                        inset -1px 0px 0px 0px $color2,
                        inset 0px -1px 0px 0px $color2;
            &:active {
                box-shadow: 2px 2px 0px 0px color.adjust($color1, $alpha: -0.1),
                            inset -1px 0px 0px 0px $color2,
                            inset 0px -1px 0px 0px $color2;
                transform: translateX(1px) translateY(1px);
            }
        }
        @if $hoverAnimation {
            &:hover {
                > span {
                    &:not(.description) {
                        text-shadow: 2px 2px 0px color.adjust($color4);
                        transition-duration: 10ms;
                        // color: vars.$color-primary;
                    }
                }
            }
            > span {
                text-shadow: 0px 0px 0px transparent;
                transition: text-shadow cubic-bezier(0, 0.52, 1, 1) 2s;
                // transition: color 50ms ease;
            }
        }
}

@mixin T_button_5(){
    box-shadow: none ;
    background-color: vars.$color-primary;
    transition: box-shadow ease-in 0.1s;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        background-color: vars.$color-button-passive;
    }
    &:hover {
        // @include Gmain.box-shadow(1, vars.$color-primary, 0.5);
        // background-color: gray;
    }
    &:active:hover {
        background-color: orange;
    }
}


.button_Default {    
    user-select: none;
    box-shadow: transparentize(black, calc(1 -  0.15)) 0px 0px 3px, transparentize(black, calc(1 - 0.11)) 0px 0px 3px;

    // border-radius: vars.$border-radius;
    border-radius: 0;
    background-color: white;
    padding: 0.5em;
    border: none;
    cursor: pointer;
    box-sizing: content-box;
    margin: 0.5em;
    overflow: hidden;
    > span {
        box-sizing: border-box;
    }
    &[state*='active'] {
        background-color: vars.$color-button-active;
    }
    &[state*='passive'] {
        background-color: vars.$color-button-passive;
    }
    &:hover {
        background-color: vars.$color-button-hover;
    }
}


.button_General {
    user-select: none;
    background-color: transparent;
    border: none;

    display: inline-block;
    font-size: 1em;
    cursor: pointer;
    border-radius: 0px;
    > span {
        display: block;
        position: relative;
        text-align: center;
        &.material-symbols-outlined {
            &.rotate90{
                transform: rotate(-90deg);
            }
        }
    }
    > .dropdown {
      position: absolute;
      left: 100%;
      margin-left: 10%;
      top: 0;
      width: fit-content;
      height: max-content;
      overflow: hidden;
    }
    &.simple {
        background-color: transparent;
        border: none;
        text-decoration: underline;
    }
    
}